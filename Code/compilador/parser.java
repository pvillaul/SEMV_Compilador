
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import structs.TablaSimbolos;
import structs.Ambito;
import structs.Elemento;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\024\002\000\002\003\005\000\002\003\003" +
    "\000\002\021\005\000\002\025\002\000\002\007\010\000" +
    "\002\007\007\000\002\022\006\000\002\022\004\000\002" +
    "\026\002\000\002\004\006\000\002\005\004\000\002\005" +
    "\003\000\002\027\002\000\002\006\006\000\002\030\002" +
    "\000\002\031\002\000\002\006\010\000\002\006\007\000" +
    "\002\006\005\000\002\006\012\000\002\006\017\000\002" +
    "\006\007\000\002\006\010\000\002\006\003\000\002\023" +
    "\003\000\002\023\005\000\002\023\002\000\002\016\005" +
    "\000\002\016\005\000\002\016\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\003\000\002\020\006\000\002" +
    "\020\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\010\005\000\002\010\003\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\012\004\000\002" +
    "\013\005\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\012\041\004\042\ufffe\043\ufffe\044\ufffe\001" +
    "\002\000\004\051\175\001\002\000\010\042\015\043\014" +
    "\044\013\001\002\000\014\002\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\001\002\000\014\002\uffff\041\004\042\ufffe" +
    "\043\ufffe\044\ufffe\001\002\000\004\002\011\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\006" +
    "\014\uffd5\050\uffd5\001\002\000\006\014\uffd6\050\uffd6\001" +
    "\002\000\006\014\uffd7\050\uffd7\001\002\000\004\050\020" +
    "\001\002\000\014\002\ufffd\041\ufffd\042\ufffd\043\ufffd\044" +
    "\ufffd\001\002\000\004\005\021\001\002\000\010\042\023" +
    "\043\014\044\013\001\002\000\006\006\170\013\167\001" +
    "\002\000\006\006\026\050\uffd7\001\002\000\004\050\025" +
    "\001\002\000\006\006\ufff6\013\ufff6\001\002\000\004\007" +
    "\ufff5\001\002\000\004\007\031\001\002\000\014\002\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\001\002\000\026\004" +
    "\042\007\ufff5\022\032\025\033\026\043\027\040\042\015" +
    "\043\014\044\013\050\034\001\002\000\004\005\160\001" +
    "\002\000\004\005\144\001\002\000\006\005\133\015\uffef" +
    "\001\002\000\030\004\uffe6\007\uffe6\010\uffe6\022\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\042\uffe6\043\uffe6\044\uffe6\050\uffe6" +
    "\001\002\000\030\004\042\007\ufff5\010\132\022\032\025" +
    "\033\026\043\027\040\042\015\043\014\044\013\050\034" +
    "\001\002\000\030\004\ufff2\007\ufff2\010\ufff2\022\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\042\ufff2\043\ufff2\044\ufff2\050\ufff2" +
    "\001\002\000\004\007\ufff5\001\002\000\006\014\uffe3\050" +
    "\113\001\002\000\012\011\055\046\050\047\045\050\047" +
    "\001\002\000\004\005\044\001\002\000\014\011\055\031" +
    "\057\046\050\047\045\050\047\001\002\000\036\006\uffd8" +
    "\012\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\001\002\000\012\006\uffd1\014\uffd1\032\uffd1\033\uffd1\001" +
    "\002\000\040\005\111\006\uffda\012\uffda\014\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\001\002\000\036\006\uffd9" +
    "\012\uffd9\014\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\001\002\000\036\006\uffdd\012\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\001\002\000\012\006\uffd0\014" +
    "\uffd0\032\uffd0\033\uffd0\001\002\000\012\006\uffd3\014\uffd3" +
    "\032\065\033\uffd3\001\002\000\036\006\uffe0\012\uffe0\014" +
    "\uffe0\016\uffe0\017\uffe0\020\101\021\102\032\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000" +
    "\012\011\055\046\050\047\045\050\047\001\002\000\020" +
    "\016\075\017\072\034\073\035\070\036\076\037\074\040" +
    "\077\001\002\000\012\011\055\046\050\047\045\050\047" +
    "\001\002\000\006\006\062\033\061\001\002\000\014\011" +
    "\055\031\057\046\050\047\045\050\047\001\002\000\004" +
    "\007\ufff5\001\002\000\030\004\uffe8\007\uffe8\010\uffe8\022" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\050\uffe8\001\002\000\012\006\uffd4\014\uffd4\032\065\033" +
    "\uffd4\001\002\000\014\011\055\031\057\046\050\047\045" +
    "\050\047\001\002\000\012\006\uffd2\014\uffd2\032\uffd2\033" +
    "\uffd2\001\002\000\012\006\uffcf\014\uffcf\032\uffcf\033\uffcf" +
    "\001\002\000\012\011\uffcc\046\uffcc\047\uffcc\050\uffcc\001" +
    "\002\000\012\011\055\046\050\047\045\050\047\001\002" +
    "\000\012\011\055\046\050\047\045\050\047\001\002\000" +
    "\012\011\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\012" +
    "\011\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\012\011" +
    "\055\046\050\047\045\050\047\001\002\000\012\011\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\001\002\000\012\011\uffca\046" +
    "\uffca\047\uffca\050\uffca\001\002\000\036\006\uffe2\012\uffe2" +
    "\014\uffe2\016\uffe2\017\uffe2\020\101\021\102\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002" +
    "\000\012\011\055\046\050\047\045\050\047\001\002\000" +
    "\012\011\055\046\050\047\045\050\047\001\002\000\036" +
    "\006\uffde\012\uffde\014\uffde\016\uffde\017\uffde\020\uffde\021" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\001\002\000\036\006\uffdf\012\uffdf\014\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\001\002\000\036\006" +
    "\uffe1\012\uffe1\014\uffe1\016\uffe1\017\uffe1\020\101\021\102" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\001\002\000\016\006\uffce\014\uffce\016\075\017\072" +
    "\032\uffce\033\uffce\001\002\000\010\012\110\016\075\017" +
    "\072\001\002\000\036\006\uffdb\012\uffdb\014\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\001\002\000\006\006\uffe3" +
    "\050\113\001\002\000\004\006\116\001\002\000\010\006" +
    "\uffe5\013\114\014\uffe5\001\002\000\010\006\uffe3\014\uffe3" +
    "\050\113\001\002\000\006\006\uffe4\014\uffe4\001\002\000" +
    "\036\006\uffdc\012\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\001\002\000\010\014\120\016\075\017\072" +
    "\001\002\000\030\004\uffeb\007\uffeb\010\uffeb\022\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\042\uffeb\043\uffeb\044\uffeb\050\uffeb" +
    "\001\002\000\004\014\ufff1\001\002\000\004\014\123\001" +
    "\002\000\030\004\ufff0\007\ufff0\010\ufff0\022\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\042\ufff0\043\ufff0\044\ufff0\050\ufff0\001" +
    "\002\000\004\030\125\001\002\000\004\005\126\001\002" +
    "\000\014\011\055\031\057\046\050\047\045\050\047\001" +
    "\002\000\006\006\130\033\061\001\002\000\030\004\uffe7" +
    "\007\uffe7\010\uffe7\022\uffe7\025\uffe7\026\uffe7\027\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\050\uffe7\001\002\000\030\004\ufff3" +
    "\007\ufff3\010\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\050\ufff3\001\002\000\040\002\ufff4" +
    "\004\ufff4\007\ufff4\010\ufff4\022\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\050\ufff4\001\002\000\006\006\uffe3\050\113\001\002\000" +
    "\004\015\135\001\002\000\012\011\055\046\050\047\045" +
    "\050\047\001\002\000\010\014\uffee\016\075\017\072\001" +
    "\002\000\004\014\140\001\002\000\030\004\uffed\007\uffed" +
    "\010\uffed\022\uffed\025\uffed\026\uffed\027\uffed\042\uffed\043" +
    "\uffed\044\uffed\050\uffed\001\002\000\004\006\142\001\002" +
    "\000\004\014\143\001\002\000\030\004\uffec\007\uffec\010" +
    "\uffec\022\uffec\025\uffec\026\uffec\027\uffec\042\uffec\043\uffec" +
    "\044\uffec\050\uffec\001\002\000\004\050\145\001\002\000" +
    "\004\015\146\001\002\000\012\011\055\046\050\047\045" +
    "\050\047\001\002\000\010\014\150\016\075\017\072\001" +
    "\002\000\014\011\055\031\057\046\050\047\045\050\047" +
    "\001\002\000\006\014\152\033\061\001\002\000\004\050" +
    "\153\001\002\000\004\015\154\001\002\000\012\011\055" +
    "\046\050\047\045\050\047\001\002\000\010\006\156\016" +
    "\075\017\072\001\002\000\004\007\ufff5\001\002\000\030" +
    "\004\uffe9\007\uffe9\010\uffe9\022\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\050\uffe9\001\002\000\014" +
    "\011\055\031\057\046\050\047\045\050\047\001\002\000" +
    "\006\006\162\033\061\001\002\000\004\023\163\001\002" +
    "\000\004\007\ufff5\001\002\000\004\024\165\001\002\000" +
    "\004\007\ufff5\001\002\000\030\004\uffea\007\uffea\010\uffea" +
    "\022\uffea\025\uffea\026\uffea\027\uffea\042\uffea\043\uffea\044" +
    "\uffea\050\uffea\001\002\000\010\042\015\043\014\044\013" +
    "\001\002\000\004\007\ufffa\001\002\000\004\007\ufff5\001" +
    "\002\000\014\002\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\001\002\000\004\050\174\001\002\000\006\006\ufff7\013" +
    "\ufff7\001\002\000\004\014\176\001\002\000\014\002\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\012\002\007\003\006\021\005\024\004\001" +
    "\001\000\002\001\001\000\004\015\015\001\001\000\002" +
    "\001\001\000\012\002\011\003\006\021\005\024\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\023\022\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\027\026\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\034\005\035\006\036\015\040\026\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\133\001\001\000\002\001\001\000\012\004\034\006\130" +
    "\015\040\026\026\001\001\000\002\001\001\000\006\004" +
    "\123\026\026\001\001\000\004\023\120\001\001\000\010" +
    "\016\116\017\053\020\050\001\001\000\002\001\001\000" +
    "\020\010\057\011\052\012\045\013\051\016\055\017\053" +
    "\020\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\106\017\053\020\050\001\001\000\004\014\070\001\001" +
    "\000\012\013\066\016\055\017\053\020\050\001\001\000" +
    "\002\001\001\000\016\011\063\012\045\013\051\016\055" +
    "\017\053\020\050\001\001\000\006\004\062\026\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\065" +
    "\013\051\016\055\017\053\020\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\105" +
    "\017\053\020\050\001\001\000\006\017\104\020\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\077" +
    "\020\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\103\001\001\000\004\020\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\126\011\052\012" +
    "\045\013\051\016\055\017\053\020\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\140\001\001\000\002\001\001\000\010" +
    "\016\135\017\053\020\050\001\001\000\004\031\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\146\017\053\020\050\001\001" +
    "\000\002\001\001\000\020\010\150\011\052\012\045\013" +
    "\051\016\055\017\053\020\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\154\017" +
    "\053\020\050\001\001\000\002\001\001\000\006\004\156" +
    "\026\026\001\001\000\002\001\001\000\020\010\160\011" +
    "\052\012\045\013\051\016\055\017\053\020\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\163\026" +
    "\026\001\001\000\002\001\001\000\006\004\165\026\026" +
    "\001\001\000\002\001\001\000\004\015\172\001\001\000" +
    "\004\025\170\001\001\000\006\004\171\026\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Connect this parser to a Tabla de Simbolos
    TablaSimbolos ts = new TablaSimbolos();
    String tipoFun;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= PART PROGRAM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PART 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
 ts.NuevoEntorno("Main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PART ::= NT$0 TYPE RESTPART 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 rp=tr; System.out.println(tr); System.out.println(ts); ts.SalirEntorno(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PART ::= HEADER 
            {
              Object RESULT =null;
		int heleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int heright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String he = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ts.CargarCabeceras(he);System.out.println("Nombre de la cabecera " + he); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PART",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // HEADER ::= include hfile semicolon 
            {
              String RESULT =null;
		int hfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String hf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = hf; System.out.println("Detectada Cabecera"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HEADER",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ambito lp = (Ambito)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 ts.InsertaID("F",id,tipoFun,lp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RESTPART ::= tid l_par LISTPARAM r_par NT$1 BLQ 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ambito lp = (Ambito)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RESTPART ::= tid l_par tvoid r_par BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RESTPART",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTPARAM ::= LISTPARAM comma TYPE tid 
            {
              Ambito RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ambito lp = (Ambito)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lp.add(new Elemento("P",id,tp)); RESULT=lp; tipoFun = tp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTPARAM ::= TYPE tid 
            {
              Ambito RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ambito("LISTPARAM"); RESULT.add(new Elemento("PARAM",id,tp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTPARAM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
 ts.NuevoEntorno("Bloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLQ ::= NT$2 l_brace SENTLIST r_brace 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println(ts); ts.SalirEntorno(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTLIST ::= SENTLIST SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTLIST ::= SENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 for(String s:ls){ts.InsertaID("V",s,tid);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= TYPE LID NT$3 semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 try{if(te == ts.getTipoVariable(id)){System.out.println("Variable Encontrada");};}catch(Exception e){System.out.println ("El error es: " + e.getMessage());e.printStackTrace();}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= tid NT$4 assig EXP NT$5 semicolon 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= tid l_par LID r_par semicolon 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 try{if(ts.ComprobarParametros(id,ls)){System.out.println("Parametros Correctos");};}catch(Exception e){System.out.println ("El error es: " + e.getMessage());e.printStackTrace();}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= treturn EXP semicolon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= tif l_par LCOND r_par tthen BLQ telse BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= tfor l_par tid assig EXP semicolon LCOND semicolon tid assig EXP r_par BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= twhile l_par LCOND r_par BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENT ::= tdo BLQ tuntil l_par LCOND r_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= BLQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LID ::= tid 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<String>(); RESULT.add(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LID ::= tid comma LID 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ls.add(id); RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LID ::= 
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LID",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= EXP add EXPT 
            {
              String RESULT =null;
		int te0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int te0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String te0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 try{if(ts.Iguales(te0,te,"ADD")){ RESULT = te; };}catch(Exception e){System.out.println ("El error es: " + e.getMessage());e.printStackTrace();}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= EXP sub EXPT 
            {
              String RESULT =null;
		int te0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int te0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String te0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 try{if(ts.Iguales(te0,te,"SUB")){ RESULT = te; };}catch(Exception e){System.out.println ("El error es: " + e.getMessage());e.printStackTrace();}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= EXPT 
            {
              String RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = te; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPT ::= EXPT mul FACTOR 
            {
              String RESULT =null;
		int te0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int te0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String te0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 try{if(ts.Iguales(te0,te,"MUL")){ RESULT = te; };}catch(Exception e){System.out.println ("El error es: " + e.getMessage());e.printStackTrace();}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPT ::= EXPT div FACTOR 
            {
              String RESULT =null;
		int te0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int te0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String te0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 try{if(ts.Iguales(te0,te,"DIV")){ RESULT = te; };}catch(Exception e){System.out.println ("El error es: " + e.getMessage());e.printStackTrace();}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPT ::= FACTOR 
            {
              String RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = te; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FACTOR ::= tid l_par LID r_par 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> ls = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 try{if(ts.ComprobarParametros(id,ls)){RESULT = ts.getTipoFuncion(id);System.out.println("Parametros Correctos");};}catch(Exception e){System.out.println ("El error es: " + e.getMessage());e.printStackTrace();}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FACTOR ::= l_bracket EXP r_bracket 
            {
              String RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = te; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FACTOR ::= tid 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ts.getTipoVariable(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FACTOR ::= constint 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "I"; System.out.println(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FACTOR ::= constfloat 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "F"; System.out.println(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPE ::= tvoid 
            {
              String RESULT =null;
		 RESULT = "V"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPE ::= tint 
            {
              String RESULT =null;
		 RESULT = "I"; System.out.println("Detectada declaracion de Entero"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TYPE ::= tfloat 
            {
              String RESULT =null;
		 RESULT = "F"; System.out.println("Detectada declaracion de Real"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LCOND ::= LCOND tor LCONDT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LCOND ::= LCONDT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCOND",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LCONDT ::= LCONDT tand LCONDF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LCONDT ::= LCONDF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LCONDF ::= COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LCONDF ::= tnot COND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCONDF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND ::= EXP OPR EXP 
            {
              Object RESULT =null;
		int te0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int te0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String te0 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String te = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 try{if(ts.Iguales(te0,te,null)){ RESULT = te; };}catch(Exception e){System.out.println ("El error es: " + e.getMessage());e.printStackTrace();}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPR ::= equals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPR ::= less 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPR ::= greater 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPR ::= greaterequal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPR ::= lessequal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
